using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace BolidEmulator
{
    public partial class BolidEmulatorGUI : Form
    {
        private const string SETTINGS_FILE = "settings.json";
        
        private BolidProtocol protocol;
        private SerialPort serialPort;
        private bool isConnected = false;
        private List<Tuple<byte, string, float>> foundDevices = new List<Tuple<byte, string, float>>();
        private bool scanning = false;
        private Thread scanThread;
        private bool polling = false;

        public BolidEmulatorGUI()
        {
            InitializeComponent();
            protocol = new BolidProtocol();
            protocol.SetDebug(true);
            
            baudrateComboBox.SelectedIndex = 1;
            parityComboBox.SelectedIndex = 0;
            stopbitsComboBox.SelectedIndex = 0;
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
        }

        private void BolidEmulatorGUI_Load(object sender, EventArgs e)
        {
            UpdatePorts();
            LoadSettings();
            protocol.SetFastMode(true); // –í—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
        }

        private void BolidEmulatorGUI_FormClosing(object sender, FormClosingEventArgs e)
        {
            DisconnectPort();
        }

        private void UpdatePorts()
        {
            try
            {
                portComboBox.Items.Clear();
                string[] ports = SerialPort.GetPortNames();
                
                if (ports.Length > 0)
                {
                    foreach (string port in ports)
                    {
                        portComboBox.Items.Add($"üîµ {port} - COM –ø–æ—Ä—Ç");
                    }
                    portComboBox.SelectedIndex = 0;
                    Log($"COM ports updated: {ports.Length} total");
                }
                else
                {
                    portComboBox.Items.Add("COM-–ø–æ—Ä—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
                    portComboBox.SelectedIndex = 0;
                    Log("COM-–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                }
            }
            catch (Exception ex)
            {
                Log($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤: {ex.Message}");
                portComboBox.Items.Add("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤");
                portComboBox.SelectedIndex = 0;
            }
        }

        private void Log(string message)
        {
            if (InvokeRequired)
            {
                Invoke(new Action<string>(Log), message);
                return;
            }
            
            string timestamp = DateTime.Now.ToString("HH:mm:ss");
            logTextBox.AppendText($"[{timestamp}] {message}\r\n");
            logTextBox.ScrollToCaret();
        }

        private bool ConnectPort()
        {
            if (isConnected)
                return true;

            string portName = portComboBox.Text;
            if (string.IsNullOrEmpty(portName) || portName.Contains("COM-–ø–æ—Ä—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"))
            {
                MessageBox.Show("–í—ã–±–µ—Ä–∏—Ç–µ COM-–ø–æ—Ä—Ç", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }

            if (portName.Contains(" - "))
                portName = portName.Split(new[] { " - " }, StringSplitOptions.None)[0];
            portName = portName.Replace("üîµ", "").Replace("üü¢", "").Replace("üî¥", "").Replace("‚ö™", "").Trim();

            try
            {
                int baudrate = int.Parse(baudrateComboBox.Text);
                Parity parity = parityComboBox.Text == "None" ? Parity.None : 
                               parityComboBox.Text == "Odd" ? Parity.Odd : Parity.Even;
                StopBits stopbits = stopbitsComboBox.Text == "1" ? StopBits.One : StopBits.Two;

                Log($"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ä—Ç—É {portName}...");

                int readTimeout = 300; // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
                int writeTimeout = 300; // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º

                serialPort = new SerialPort(portName, baudrate, parity, 8, stopbits)
                {
                    ReadTimeout = readTimeout,
                    WriteTimeout = writeTimeout
                };

                serialPort.Open();
                serialPort.DiscardInBuffer();
                serialPort.DiscardOutBuffer();


                protocol.StartMonitoring(serialPort);

                isConnected = true;
                connectButton.Text = "–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è";

                SaveSettings();

                Log($"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–æ—Ä—Ç—É {portName}");
                return true;
            }
            catch (Exception ex)
            {
                CleanupPort();
                Log($"–û—à–∏–±–∫–∞ –ø–æ—Ä—Ç–∞ {portName}: {ex.Message}");
                MessageBox.Show(
                    $"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç {portName}:\n{ex.Message}\n\n" +
                    $"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
                    $"‚Ä¢ –ü–æ—Ä—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π\n" +
                    $"‚Ä¢ –ü–æ—Ä—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n" +
                    $"‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞",
                    "–û—à–∏–±–∫–∞ –ø–æ—Ä—Ç–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
        }

        private void CleanupPort()
        {
            try
            {
                if (serialPort != null)
                {
                    try
                    {
                        if (serialPort.IsOpen)
                            serialPort.Close();
                    }
                    catch { }
                    serialPort = null;
                }
                isConnected = false;
                connectButton.Text = "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è";
            }
            catch { }
        }

        private void DisconnectPort()
        {
            try
            {
                string portName = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

                if (protocol != null)
                {
                    try
                    {
                        protocol.StopMonitoring();
                    }
                    catch (Exception ex)
                    {
                        Log($"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
                    }
                }

                if (serialPort != null)
                {
                    try
                    {
                        portName = serialPort.PortName;
                        if (serialPort.IsOpen)
                        {
                            serialPort.Close();
                            try
                            {
                                serialPort.DiscardInBuffer();
                                serialPort.DiscardOutBuffer();
                            }
                            catch { }
                        }
                    }
                    catch (Exception ex)
                    {
                        Log($"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞: {ex.Message}");
                    }
                    finally
                    {
                        serialPort = null;
                    }
                }

                isConnected = false;

                if (scanning)
                {
                    scanning = false;
                    if (scanThread != null && scanThread.IsAlive)
                    {
                        try
                        {
                            scanThread.Join(1000);
                        }
                        catch { }
                    }
                }

                if (polling)
                {
                    polling = false;
                }

                try
                {
                    connectButton.Text = "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è";
                }
                catch { }

                Log("–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –ø–æ—Ä—Ç–∞");
            }
            catch (Exception ex)
            {
                Log($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {ex.Message}");
                try
                {
                    serialPort = null;
                    isConnected = false;
                }
                catch { }
            }
        }

        private void PollDevice()
        {
            if (!ConnectPort())
                return;

            if (polling)
            {
                Log("–û–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
                return;
            }

            byte addr = (byte)addrNumericUpDown.Value;
            Log($"–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å {addr}");

            polling = true;

            Thread pollThread = new Thread(() =>
            {
                try
                {
                    var success = protocol.RequestDeviceTypeVersion(addr, serialPort);
                    if (!success.Item1)
                    {
                        Invoke(new Action(() => Log($"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {success.Item2}")));
                        return;
                    }

                    double responseTimeout = 3.0; // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º

                    var response = protocol.GetResponse(responseTimeout, addr);
                    if (response != null)
                    {
                        Invoke(new Action(() => ParseDeviceVersionResponse(response)));
                    }
                    else
                    {
                        Invoke(new Action(() => Log("–¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞")));
                    }
                }
                catch (Exception ex)
                {
                    Invoke(new Action(() => Log($"–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞: {ex.Message}")));
                }
                finally
                {
                    polling = false;
                }
            });
            pollThread.IsBackground = true;
            pollThread.Start();
        }

        private void ParseDeviceVersionResponse(object response)
        {
            byte magic = 0;
            byte deviceType = 0;
            byte addr = 0;
            byte deviceVersion = 0;

            if (response is ResponseDeviceTypeVersionShort shortResp)
            {
                magic = shortResp.Magic;
                deviceType = shortResp.DeviceType;
                addr = shortResp.Addr;
                deviceVersion = shortResp.DeviceVersion;
            }
            else if (response is ResponseDeviceTypeVersionMiddle midResp)
            {
                magic = midResp.Magic;
                deviceType = midResp.DeviceType;
                addr = midResp.Addr;
                deviceVersion = midResp.DeviceVersion;
            }
            else if (response is ResponseDeviceTypeVersionLong longResp)
            {
                magic = longResp.Magic;
                deviceType = longResp.DeviceType;
                addr = longResp.Addr;
                deviceVersion = longResp.DeviceVersion;
            }
            else
            {
                Log("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞");
                return;
            }

            if (magic != 0)
            {
                Log($"–û—à–∏–±–∫–∞ (–∫–æ–¥ 0x{magic:X2})");
                return;
            }

            string deviceName = BolidConstants.DEVICES.ContainsKey(deviceType) 
                ? BolidConstants.DEVICES[deviceType] 
                : $"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceType}";

            float versionFloat = deviceVersion / 100.0f;

            bool deviceExists = foundDevices.Any(d => d.Item1 == addr);
            if (!deviceExists)
            {
                foundDevices.Add(Tuple.Create(addr, deviceName, versionFloat));
                UpdateDevicesList();
            }

            string result = $"–ê–¥—Ä–µ—Å: {addr}\n–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceName}\n–í–µ—Ä—Å–∏—è: {versionFloat:F2}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: OK";
            Log(result);
        }

        private void ScanDevices()
        {
            if (!ConnectPort())
                return;

            if (scanning)
            {
                Log("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
                return;
            }

            byte startAddr = (byte)scanStartNumericUpDown.Value;
            byte endAddr = (byte)scanEndNumericUpDown.Value;
            double timeout = (double)scanTimeoutNumericUpDown.Value;

            if (startAddr > endAddr)
            {
                MessageBox.Show("–ù–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (endAddr - startAddr > 127)
            {
                var result = MessageBox.Show(
                    $"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {endAddr - startAddr + 1} –∞–¥—Ä–µ—Å–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result != DialogResult.Yes)
                    return;
            }

            if (serialPort == null || !serialPort.IsOpen)
            {
                MessageBox.Show("–ü–æ—Ä—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }


            scanning = true;
            scanButton.Enabled = false;
            stopScanButton.Enabled = true;

            Log($"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ {startAddr}-{endAddr}");

            scanThread = new Thread(() =>
            {
                try
                {
                    bool ProgressCallback(byte addr, int foundCount, int total)
                    {
                        if (!scanning)
                            return false;

                        float progress = (addr - startAddr + 1) / (float)total * 100;
                        Invoke(new Action(() => statusLabel.Text = 
                            $"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ... {addr}/{endAddr} ({progress:F1}%) - –Ω–∞–π–¥–µ–Ω–æ: {foundCount}"));
                        return true;
                    }

                    void DeviceFoundCallback(byte addr, string deviceName, float deviceVersion)
                    {
                        if (!scanning)
                            return;

                        bool deviceExists = foundDevices.Any(d => d.Item1 == addr);
                        if (!deviceExists)
                        {
                            foundDevices.Add(Tuple.Create(addr, deviceName, deviceVersion));
                            Invoke(new Action(() => UpdateDevicesList()));
                            Invoke(new Action(() => Log($"–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –∞–¥—Ä–µ—Å {addr}, —Ç–∏–ø: {deviceName}, –≤–µ—Ä—Å–∏—è: {deviceVersion:F2}")));
                        }
                    }

                    var devices = protocol.ScanDevices(serialPort, startAddr, endAddr, timeout, 
                        ProgressCallback, DeviceFoundCallback);

                    if (scanning)
                    {
                        Invoke(new Action(() => ShowScanResults(devices)));
                    }
                    else
                    {
                        Invoke(new Action(() => Log("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")));
                    }
                }
                catch (Exception ex)
                {
                    Invoke(new Action(() => Log($"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}")));
                    Invoke(new Action(() => MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}", 
                        "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error)));
                }
                finally
                {
                    scanning = false;
                    Invoke(new Action(() => scanButton.Enabled = true));
                    Invoke(new Action(() => stopScanButton.Enabled = false));
                    Invoke(new Action(() => statusLabel.Text = "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"));
                }
            });
            scanThread.IsBackground = true;
            scanThread.Start();
        }

        private void ShowScanResults(List<Tuple<byte, string, float>> devices)
        {
            if (devices.Count == 0)
            {
                Log("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                MessageBox.Show("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∞–¥—Ä–µ—Å–æ–≤", 
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            Log($"–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {devices.Count}");
            foreach (var device in devices)
            {
                Log($"–ê–¥—Ä–µ—Å {device.Item1}: {device.Item2} v{device.Item3:F2}");
            }

            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {devices.Count}\n");
            foreach (var device in devices)
            {
                sb.AppendLine($"–ê–¥—Ä–µ—Å {device.Item1}: {device.Item2} v{device.Item3:F2}");
            }

            MessageBox.Show(sb.ToString(), "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", 
                MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void UpdateDevicesList()
        {
            devicesListBox.Items.Clear();

            foreach (var device in foundDevices)
            {
                string deviceText = $"–ê–¥—Ä–µ—Å {device.Item1}: {device.Item2} v{device.Item3:F2}";
                devicesListBox.Items.Add(deviceText);
            }

            if (foundDevices.Count == 0)
            {
                devicesListBox.Items.Add("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            }
        }

        private void LoadSettings()
        {
            try
            {
                if (File.Exists(SETTINGS_FILE))
                {
                    string json = File.ReadAllText(SETTINGS_FILE);
                    JObject settings = JObject.Parse(json);

                    if (settings["com_port"] != null)
                    {
                        string portName = settings["com_port"].ToString();
                        for (int i = 0; i < portComboBox.Items.Count; i++)
                        {
                            if (portComboBox.Items[i].ToString().Contains(portName))
                            {
                                portComboBox.SelectedIndex = i;
                                break;
                            }
                        }
                    }

                    if (settings["baudrate"] != null)
                        baudrateComboBox.Text = settings["baudrate"].ToString();
                    if (settings["parity"] != null)
                        parityComboBox.Text = settings["parity"].ToString();
                    if (settings["stopbits"] != null)
                        stopbitsComboBox.Text = settings["stopbits"].ToString();
                    if (settings["device_address"] != null)
                        addrNumericUpDown.Value = (int)settings["device_address"];
                    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã - –≤—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
                    protocol.SetFastMode(true);

                    Log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
                }
            }
            catch (Exception ex)
            {
                Log($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            }
        }

        private void SaveSettings()
        {
            try
            {
                string portName = portComboBox.Text;
                if (portName.Contains(" - "))
                    portName = portName.Split(new[] { " - " }, StringSplitOptions.None)[0];
                portName = portName.Replace("üîµ", "").Replace("üü¢", "").Replace("üî¥", "").Replace("‚ö™", "").Trim();

                var settings = new
                {
                    com_port = portName,
                    baudrate = baudrateComboBox.Text,
                    parity = parityComboBox.Text,
                    stopbits = stopbitsComboBox.Text,
                    device_address = (int)addrNumericUpDown.Value,
                    fast_port = false, // –í—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
                    last_saved = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
                };

                string json = JsonConvert.SerializeObject(settings, Formatting.Indented);
                File.WriteAllText(SETTINGS_FILE, json);

                Log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
            }
            catch (Exception ex)
            {
                Log($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            }
        }

        private void refreshPortsButton_Click(object sender, EventArgs e)
        {
            UpdatePorts();
        }

        private void connectButton_Click(object sender, EventArgs e)
        {
            if (isConnected)
            {
                DisconnectPort();
            }
            else
            {
                if (ConnectPort())
                {
                    connectButton.Text = "–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è";
                }
            }
        }


        private void pollDeviceButton_Click(object sender, EventArgs e)
        {
            PollDevice();
        }

        private void scanButton_Click(object sender, EventArgs e)
        {
            ScanDevices();
        }

        private void stopScanButton_Click(object sender, EventArgs e)
        {
            if (scanning)
            {
                scanning = false;
                Log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...");
                statusLabel.Text = "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";
            }
        }

        private void clearDevicesButton_Click(object sender, EventArgs e)
        {
            foundDevices.Clear();
            devicesListBox.Items.Clear();
            devicesListBox.Items.Add("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            Log("–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—á–∏—â–µ–Ω");
        }

        private void devicesListBox_DoubleClick(object sender, EventArgs e)
        {
            if (scanning)
            {
                Log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º");
                scanning = false;
                if (scanThread != null && scanThread.IsAlive)
                {
                    scanThread.Join(1000);
                }
            }

            if (polling)
            {
                Log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
                polling = false;
            }

            OpenDeviceControl();
        }

        private void OpenDeviceControl()
        {
            if (devicesListBox.SelectedIndex == -1)
            {
                MessageBox.Show("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (foundDevices.Count == 0)
            {
                MessageBox.Show("–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            int deviceIndex = devicesListBox.SelectedIndex;
            if (deviceIndex >= foundDevices.Count)
            {
                MessageBox.Show("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            var device = foundDevices[deviceIndex];

            if (!isConnected)
            {
                string deviceInfoText = $"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:\n\n" +
                    $"–ê–¥—Ä–µ—Å: {device.Item1}\n" +
                    $"–¢–∏–ø: {device.Item2}\n" +
                    $"–í–µ—Ä—Å–∏—è: {device.Item3:F2}\n\n" +
                    $"–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ COM-–ø–æ—Ä—Ç—É.\n" +
                    $"–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å–µ–π—á–∞—Å?";

                if (MessageBox.Show(deviceInfoText, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ", 
                    MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                    return;

                if (!ConnectPort())
                    return;
            }

            protocol.ClearResponses();

            try
            {
                // –°–æ–∑–¥–∞–µ–º DeviceInfo –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                int deviceCode = GetDeviceCodeFromName(device.Item2);
                int maxBranches = GetMaxBranchesForDevice(device.Item1, device.Item2);
                int maxRelays = GetMaxRelaysForDevice(device.Item1, device.Item2);
                
                Log($"–°–æ–∑–¥–∞–Ω–∏–µ DeviceInfo: –Ω–∞–∑–≤–∞–Ω–∏–µ={device.Item2}, –∫–æ–¥={deviceCode}, —à–ª–µ–π—Ñ—ã={maxBranches}, —Ä–µ–ª–µ={maxRelays}");
                
                var deviceType = new DeviceType(deviceCode, device.Item2, maxBranches, maxRelays);
                var deviceInfo = new DeviceInfo(device.Item1, deviceType, device.Item3);

                // –°–æ–∑–¥–∞–µ–º DeviceManager
                var deviceManager = new DeviceManager(protocol, serialPort);
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ DeviceManager
                deviceManager.RegisterDevice(deviceInfo);

                // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                var controlPanel = new DeviceControlPanel(this, deviceManager, deviceInfo, Log);
                controlPanel.StartPosition = FormStartPosition.CenterScreen;
                controlPanel.Show();
                
                Log($"–û—Ç–∫—Ä—ã—Ç–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º: {device.Item2} (–∞–¥—Ä–µ—Å {device.Item1})");
            }
            catch (Exception ex)
            {
                Log($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void s2000ppMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                if (isConnected)
                {
                    DisconnectPort();
                    Log("–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç COM-–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –°2000-–ü–ü");
                }

                var s2000ppWindow = new S2000PPWindow(this);
                s2000ppWindow.StartPosition = FormStartPosition.CenterScreen;
                s2000ppWindow.Show();
                Log("–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°2000-–ü–ü");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –°2000-–ü–ü: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void aboutMenuItem_Click(object sender, EventArgs e)
        {
            Form aboutForm = new Form
            {
                Text = "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
                Size = new Size(500, 500),
                StartPosition = FormStartPosition.CenterScreen,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                MaximizeBox = false,
                MinimizeBox = false
            };

            Label titleLabel = new Label
            {
                Text = "–≠–º—É–ª—è—Ç–æ—Ä –ø—É–ª—å—Ç–∞ –°2000/–°2000–ú v1.0",
                Font = new Font("Arial", 14, FontStyle.Bold),
                Location = new Point(20, 20),
                Size = new Size(460, 30),
                TextAlign = ContentAlignment.MiddleCenter
            };

            Label descLabel = new Label
            {
                Text = "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –æ—Ö—Ä–∞–Ω–Ω–æ-–ø–æ–∂–∞—Ä–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ Bolid —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.\n\n" +
                       "–§—É–Ω–∫—Ü–∏–∏:\n" +
                       "‚Ä¢ –û–ø—Ä–æ—Å —Ç–∏–ø–∞ –∏ –≤–µ—Ä—Å–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n" +
                       "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–ª–µ–π—Ñ–∞–º–∏ (–≤–∑—è—Ç–∏–µ/—Å–Ω—è—Ç–∏–µ)\n" +
                       "‚Ä¢ –ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–ª–µ–π—Ñ–æ–≤ –∏ –ê–¶–ü\n" +
                       "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏\n" +
                       "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –°2000-–ü–ü —á–µ—Ä–µ–∑ Modbus RTU\n\n" +
                       "–ü—Ä–æ—Ç–æ–∫–æ–ª: Bolid RS-485/RS-232\n" +
                       "–¢–∞–π–º–∞—É—Ç: 3000 –º—Å",
                Font = new Font("Arial", 10),
                Location = new Point(20, 60),
                Size = new Size(460, 200),
                TextAlign = ContentAlignment.TopLeft
            };

            GroupBox authorGroup = new GroupBox
            {
                Text = "–ê–≤—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                Location = new Point(20, 270),
                Size = new Size(460, 60)
            };

            Label authorLabel = new Label
            {
                Text = "–ó–∞–π–Ω—É–ª–ª–∏–Ω –¢–∏–º—É—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á",
                Font = new Font("Arial", 12, FontStyle.Bold),
                Location = new Point(10, 20),
                Size = new Size(440, 30),
                TextAlign = ContentAlignment.MiddleCenter
            };
            authorGroup.Controls.Add(authorLabel);

            GroupBox contactsGroup = new GroupBox
            {
                Text = "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
                Location = new Point(20, 340),
                Size = new Size(460, 80)
            };

            Label contactsLabel = new Label
            {
                Text = "–°–∞–π—Ç: https://dylics.online/\n" +
                       "Email: dylics@gmail.com\n" +
                       "Telegram: @Dylics_STR",
                Font = new Font("Arial", 10),
                Location = new Point(10, 20),
                Size = new Size(440, 55),
                TextAlign = ContentAlignment.TopLeft
            };
            contactsGroup.Controls.Add(contactsLabel);

            Button closeButton = new Button
            {
                Text = "–ó–∞–∫—Ä—ã—Ç—å",
                Location = new Point(200, 430),
                Size = new Size(100, 30)
            };
            closeButton.Click += (s, ev) => aboutForm.Close();

            aboutForm.Controls.Add(titleLabel);
            aboutForm.Controls.Add(descLabel);
            aboutForm.Controls.Add(authorGroup);
            aboutForm.Controls.Add(contactsGroup);
            aboutForm.Controls.Add(closeButton);

            aboutForm.ShowDialog(this);
        }

        private void exitMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private int GetDeviceCodeFromName(string deviceName)
        {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if (deviceName.Contains("–°2000-–ö–î–õ")) return 9;
            if (deviceName.Contains("–°2000-–ö–ü–ë")) return 15;
            if (deviceName.Contains("–°–∏–≥–Ω–∞–ª-20–ü")) return 2;
            if (deviceName.Contains("–°–∏–≥–Ω–∞–ª-10")) return 32;
            if (deviceName.Contains("–°2000-–ü–ü")) return 36;
            if (deviceName.Contains("–°2000-–°–ü1")) return 1;
            if (deviceName.Contains("–°2000-–°–ü2")) return 11;
            if (deviceName.Contains("–°2000-–°–ü1 –ò–°–ü.01")) return 26;
            if (deviceName.Contains("–°2000-–°–ü2 –ò–°–ü.01")) return 34;
            if (deviceName.Contains("–ú–ò–ü-12")) return 48;
            if (deviceName.Contains("–ú–ò–ü-24")) return 49;
            if (deviceName.Contains("–†–ò–ü-12")) return 38;
            if (deviceName.Contains("–†–ò–ü-12 –ò–°–ü.01")) return 39;
            if (deviceName.Contains("–†–ò–ü-12 –ò–°–ü.02")) return 54;
            if (deviceName.Contains("–†–ò–ü-12 –ò–°–ü.03")) return 55;
            if (deviceName.Contains("–†–ò–ü-12 –ò–°–ü.04")) return 79;
            if (deviceName.Contains("–†–ò–ü-12 –ò–°–ü.05")) return 80;
            if (deviceName.Contains("–°2000-–ê–†1")) return 41;
            if (deviceName.Contains("–°2000-–ê–†2")) return 61;
            if (deviceName.Contains("–°2000-–ê–†8")) return 81;
            
            return 0; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        }

        private int GetMaxBranchesForDevice(byte address, string deviceName)
        {
            int deviceCode = GetDeviceCodeFromName(deviceName);
            
            switch (deviceCode)
            {
                case 9: return 127; // –°2000-–ö–î–õ
                case 1: return 1;   // –°2000-–°–ü1
                case 2: return 20;   // –°–∏–≥–Ω–∞–ª-20–ü (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 2 –Ω–∞ 20)
                case 11: return 2; // –°2000-–°–ü2
                case 15: return 2; // –°2000-–ö–ü–ë
                case 26: return 1; // –°2000-–°–ü1 –ò–°–ü.01
                case 32: return 10; // –°–∏–≥–Ω–∞–ª-10 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 1 –Ω–∞ 10)
                case 34: return 2; // –°2000-–°–ü2 –ò–°–ü.01
                case 41: return 1; // –°2000-–ê–†1
                case 61: return 2; // –°2000-–ê–†2
                case 81: return 8; // –°2000-–ê–†8
                // –ú–ò–ü —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–º–æ–¥—É–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∏—Ç–∞–Ω–∏—è)
                case 48: return 5; // –ú–ò–ü-12
                case 49: return 5; // –ú–ò–ü-24
                // –†–ò–ü —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è)
                case 33: return 5; // –†–ò–ü-12
                case 38: return 5; // –†–ò–ü-12 –ò–°–ü.01
                case 39: return 5; // –†–ò–ü-24 –ò–°–ü.01
                case 54: return 5; // –†–ò–ü-12 –ò–°–ü.04
                case 55: return 5; // –†–ò–ü-24 –ò–°–ü.05
                case 79: return 5; // –†–ò–ü-12 –ò–°–ü.06
                case 80: return 5; // –†–ò–ü-24 –ò–°–ü.07
                default: return 0;
            }
        }

        private int GetMaxRelaysForDevice(byte address, string deviceName)
        {
            int deviceCode = GetDeviceCodeFromName(deviceName);
            
            switch (deviceCode)
            {
                case 2: return 5;  // –°–∏–≥–Ω–∞–ª-20–ü (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 6 –Ω–∞ 5)
                case 15: return 6; // –°2000-–ö–ü–ë (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 4 –Ω–∞ 6)
                case 32: return 4; // –°–∏–≥–Ω–∞–ª-10
                // –ú–ò–ü —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–º–æ–¥—É–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∏—Ç–∞–Ω–∏—è) - –ù–ï –ò–ú–ï–Æ–¢ –†–ï–õ–ï
                case 48: return 0; // –ú–ò–ü-12
                case 49: return 0; // –ú–ò–ü-24
                // –†–ò–ü —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è)
                case 33: return 2; // –†–ò–ü-12
                case 38: return 2; // –†–ò–ü-12 –ò–°–ü.01
                case 39: return 4; // –†–ò–ü-24 –ò–°–ü.01
                case 54: return 2; // –†–ò–ü-12 –ò–°–ü.04
                case 55: return 4; // –†–ò–ü-24 –ò–°–ü.05
                case 79: return 2; // –†–ò–ü-12 –ò–°–ü.06
                case 80: return 4; // –†–ò–ü-24 –ò–°–ü.07
                default: return 0;
            }
        }
    }
}
